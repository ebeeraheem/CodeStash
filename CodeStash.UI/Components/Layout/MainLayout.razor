@inherits LayoutComponentBase
@inject IJSRuntime JS

<MudThemeProvider @ref="@_themeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                       Color="Color.Inherit" Edge="Edge.Start" 
                       OnClick="@((e) => DrawerToggle())" />
        CodeStash

        <MudIconButton Icon="@modeIcon"
                       Color="Color.Inherit" Edge="Edge.End"
                       OnClick="@((e) => DarkModeToggle())" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _themeProvider = new();
    private bool _isDarkMode;
    private string modeIcon => _isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        await JS.InvokeVoidAsync("localStorage.setItem", "darkMode", _isDarkMode.ToString().ToLower());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _themeProvider.WatchSystemPreference(OnSystemPreferenceChanged);

        // Check if dark mode preference is stored
        var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "darkMode");

        if (!string.IsNullOrEmpty(savedTheme))
        {
            _isDarkMode = savedTheme == "true";
        }
        else
        {
            // If no preference is found, use system setting
            _isDarkMode = await _themeProvider.GetSystemPreference();
            await JS.InvokeVoidAsync("localStorage.setItem", "darkMode", _isDarkMode.ToString().ToLower());
        }

        StateHasChanged();
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        await JS.InvokeVoidAsync("localStorage.setItem", "darkMode", _isDarkMode.ToString().ToLower());

        StateHasChanged();
    }
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
 