@using CodeStash.Application.Filters
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject ISnippetService SnippetService

<MudThemeProvider Theme="csTheme" @ref="@_themeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Class="d-flex justify-space-between" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
        Class="d-md-none"
        Color="Color.Inherit" Edge="Edge.Start"
        OnClick="@((e) => DrawerToggle())" />

        <MudLink Href="/" Class="fw-bold d-flex align-center" Underline="Underline.None">
            <MudIcon Icon="@logo" Class="z-100" />
            CodeStash
        </MudLink>

        <MudSpacer />

        <MudAutocomplete
        @bind-Value="_searchTerm" 
        SearchFunc="@FindSnippets"
        Placeholder="Find snippets"
        AdornmentIcon="@Icons.Material.Filled.Search"
        AdornmentColor="Color.Primary" />

        <MudSpacer />
    </MudAppBar>
    <MudDrawer ClipMode="DrawerClipMode.Always" @bind-Open="@_drawerOpen">
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _themeProvider = new();
    bool _isDarkMode = true;
    bool _drawerOpen = true;
    private string _searchTerm = string.Empty;

    MudTheme csTheme = new MudTheme()
        {
            PaletteDark = new PaletteDark
            {
                Primary = CodeStashColors.Primary,
                Secondary = CodeStashColors.Secondary,
                Tertiary = CodeStashColors.Tertiary,
                Background = CodeStashColors.Background,
                AppbarBackground = CodeStashColors.AppbarBackground,
                DrawerBackground = CodeStashColors.DrawerBackground,
            },
            Typography = new Typography()
            {
                Default = new DefaultTypography()
                {
                    FontFamily = new[] { "Quicksand", "Helvetica", "Arial", "sans-serif" },
                    FontSize = ".875rem",
                    FontWeight = "400",
                    LineHeight = "1.43",
                    LetterSpacing = ".01071em"
                }
            }
        };

    async Task<IEnumerable<string>> FindSnippets(string value, CancellationToken token)
    {
        throw new NotImplementedException();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    const string logo = @"<svg style=""width:24px;height:24px"" viewBox=""0 0 24 24"">
    <path fill=""currentColor"" d=""M11.5528 3.10557C11.8343 2.96481 12.1657 2.96481 12.4472 3.10557L20.4472 7.10557C20.786 7.27496 21 7.62123 21 8C21 8.37877 20.786 8.72504 20.4472 8.89443L18.3673 9.93441L20.4903 11.1286C20.8128 11.31 21.0087 11.6546 20.9997 12.0245C20.9907 12.3944 20.7782 12.7291 20.4472 12.8946L18.3674 13.9345L20.4903 15.1286C20.8128 15.31 21.0087 15.6546 20.9997 16.0245C20.9907 16.3944 20.7782 16.7291 20.4472 16.8946L12.4472 20.8946C12.1657 21.0354 11.8343 21.0354 11.5528 20.8946L3.55279 16.8946C3.22184 16.7291 3.00931 16.3944 3.0003 16.0245C2.99128 15.6546 3.18725 15.31 3.50974 15.1286L5.63258 13.9345L3.55279 12.8946C3.22184 12.7291 3.00931 12.3944 3.0003 12.0245C2.99128 11.6546 3.18725 11.31 3.50974 11.1286L5.63275 9.93441L3.55279 8.89443C3.214 8.72504 3 8.37877 3 8C3 7.62123 3.214 7.27496 3.55279 7.10557L11.5528 3.10557ZM7.7923 15.0144L6.13213 15.9482L12 18.8821L17.8679 15.9482L16.2077 15.0144L12.4472 16.8946C12.1657 17.0354 11.8343 17.0354 11.5528 16.8946L7.7923 15.0144ZM12.4472 12.8944L16.2075 11.0143L17.8679 11.9482L12 14.8821L6.13213 11.9482L7.79246 11.0143L11.5528 12.8944C11.8343 13.0352 12.1657 13.0352 12.4472 12.8944Z"" ></path>
    </svg>";
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
 